{
  "openapi": "3.0.0",
  "paths": {
    "/api/accounts": {
      "get": {
        "operationId": "AccountController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of accounts associated with the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccountsResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "List all accounts for the current user",
        "tags": ["Accounts"]
      }
    },
    "/api/users": {
      "get": {
        "description": "Retrieve a list of all users in the system",
        "operationId": "UserController_findAll",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "summary": "Get all users",
        "tags": ["User Management"]
      }
    },
    "/api/users/{id}": {
      "get": {
        "description": "Retrieve a specific user by their unique identifier",
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "description": "Relations to include in the response. Use dot notation for nested relations.",
            "schema": {
              "example": ["company", "company.accounts"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Fields to select in the response",
            "schema": {
              "example": ["id", "email", "firstName", "lastName"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort configuration. Can be a single field or multiple fields.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/SortField" }
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filter conditions as JSON object",
            "schema": { "$ref": "#/components/schemas/Object" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get user by ID",
        "tags": ["User Management"]
      }
    },
    "/api/inbox/{id}": {
      "get": {
        "description": "Gets an inbox by id",
        "operationId": "InboxController_getInbox",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get inbox",
        "tags": ["Inbox Management"]
      },
      "delete": {
        "description": "Deletes an inbox",
        "operationId": "InboxController_deleteInbox",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Delete inbox",
        "tags": ["Inbox Management"]
      }
    },
    "/api/inbox": {
      "get": {
        "description": "Gets all inboxes",
        "operationId": "InboxController_getInboxes",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "summary": "Get inboxes",
        "tags": ["Inbox Management"]
      }
    },
    "/api/conversations": {
      "get": {
        "operationId": "ConversationController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "description": "Relations to include in the response. Use dot notation for nested relations.",
            "schema": {
              "example": ["company", "company.accounts"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Fields to select in the response",
            "schema": {
              "example": ["id", "email", "firstName", "lastName"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort configuration. Can be a single field or multiple fields.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/SortField" }
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filter conditions as JSON object",
            "schema": { "$ref": "#/components/schemas/Object" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get all conversations",
        "tags": ["Conversations"]
      }
    },
    "/api/conversations/{id}": {
      "get": {
        "operationId": "ConversationController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get a conversation by ID",
        "tags": ["Conversations"]
      },
      "patch": {
        "operationId": "ConversationController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateConversationDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "summary": "Update a conversation",
        "tags": ["Conversations"]
      }
    },
    "/api/conversation-messages": {
      "get": {
        "operationId": "ConversationMessageController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "description": "Relations to include in the response. Use dot notation for nested relations.",
            "schema": {
              "example": ["company", "company.accounts"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Fields to select in the response",
            "schema": {
              "example": ["id", "email", "firstName", "lastName"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort configuration. Can be a single field or multiple fields.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/SortField" }
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filter conditions as JSON object",
            "schema": { "$ref": "#/components/schemas/Object" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get all conversation messages",
        "tags": ["Conversation Messages"]
      },
      "post": {
        "description": "Sends a message to a conversation using the channel processor",
        "operationId": "ConversationMessageController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationMessageDto"
              }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "summary": "Send a message to a conversation",
        "tags": ["Conversation Messages"]
      }
    },
    "/api/bots": {
      "get": {
        "operationId": "BotController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "description": "Relations to include in the response. Use dot notation for nested relations.",
            "schema": {
              "example": ["company", "company.accounts"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Fields to select in the response",
            "schema": {
              "example": ["id", "email", "firstName", "lastName"],
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort configuration. Can be a single field or multiple fields.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/SortField" }
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filter conditions as JSON object",
            "schema": { "$ref": "#/components/schemas/Object" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get all bots for the active account",
        "tags": ["Bot"]
      },
      "post": {
        "operationId": "BotController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateOrUpdateBotDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "summary": "Create a new bot",
        "tags": ["Bot"]
      }
    },
    "/api/bots/{id}": {
      "get": {
        "operationId": "BotController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Get a bot by ID",
        "tags": ["Bot"]
      },
      "put": {
        "operationId": "BotController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateOrUpdateBotDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "summary": "Update a bot",
        "tags": ["Bot"]
      },
      "delete": {
        "operationId": "BotController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Delete a bot",
        "tags": ["Bot"]
      }
    }
  },
  "info": {
    "title": "Kuantia CRM API",
    "description": "Kuantia CRM API Documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "ListAccountResponseAccountElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the account",
            "example": "uuid-123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Display name of the account",
            "example": "Acme Corp Customer Support"
          },
          "role": {
            "type": "string",
            "description": "User role within this account",
            "enum": ["admin", "user"],
            "example": "admin"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-20T14:45:00Z"
          }
        },
        "required": ["id", "name", "role", "createdAt", "updatedAt"]
      },
      "ListAccountsResponseDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "List of accounts accessible to the user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListAccountResponseAccountElement"
            }
          }
        },
        "required": ["accounts"]
      },
      "SortField": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name to sort by",
            "example": "createdAt"
          },
          "order": {
            "type": "string",
            "description": "Sort order",
            "enum": ["ASC", "DESC"],
            "example": "DESC"
          }
        }
      },
      "Object": { "type": "object", "properties": {} },
      "UpdateConversationDto": {
        "type": "object",
        "properties": {
          "disableBotCall": {
            "type": "boolean",
            "description": "Whether to disable bot calls for this conversation",
            "example": true
          },
          "customFields": {
            "type": "object",
            "description": "Custom fields for the conversation",
            "example": {
              "priority": "high",
              "deal_stage": "qualified",
              "deal_value": 50000,
              "tags": ["enterprise", "hot_lead"]
            }
          },
          "lastMessageId": {
            "type": "string",
            "description": "ID of the last message in the conversation",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "CreateConversationMessageDto": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "The ID of the conversation to send the message to"
          },
          "message": { "type": "string", "description": "The message to send" },
          "type": {
            "type": "string",
            "description": "The type of the message",
            "enum": ["USER", "BOT", "NOTE"]
          },
          "messageType": {
            "type": "string",
            "description": "The type of the message",
            "example": "TEXT",
            "enum": ["TEXT", "IMAGE", "AUDIO", "VIDEO", "FILE"]
          },
          "content": {
            "type": "object",
            "description": "An optional object containing additional metada fields for the message (e.g. text, image, audio)",
            "additionalProperties": true,
            "example": {}
          }
        },
        "required": [
          "conversationId",
          "message",
          "type",
          "messageType",
          "content"
        ]
      },
      "CreateOrUpdateBotDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the bot",
            "example": "My Bot"
          },
          "profilePicturePath": {
            "type": "string",
            "description": "The profile picture path of the bot",
            "example": "https://example.com/profile-picture.png"
          },
          "description": {
            "type": "string",
            "description": "The description of the bot",
            "example": "This is my bot"
          },
          "webhookUrl": {
            "type": "string",
            "description": "The webhook URL of the bot",
            "example": "https://example.com/webhook"
          },
          "inboxesIds": {
            "description": "The inboxes IDs of the bot",
            "example": ["123e4567-e89b-12d3-a456-426614174000"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "name",
          "profilePicturePath",
          "description",
          "webhookUrl",
          "inboxesIds"
        ]
      }
    }
  }
}
